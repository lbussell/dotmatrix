@page "/"

@using System
@using DotMatrix.Core

<PageTitle>Index</PageTitle>

<InputFile OnChange="@LoadFile" />

<div id="dbg-section">
    <div class="row">
        <div class="col-lg-4">
            Display
            <div id="display-container">
                <canvas id="myCanvas" width="320" height="288"></canvas>
            </div>
        </div>

        <div class="col-lg-4">
            Instructions
            <div id="instructions" class="overflow-scroll">
            </div>
        </div>

        <div class="col-lg-2">
            <Registers cpuState="@cpuState"/>
        </div>

        <div class="col-lg-2">
            Stack
            <div id="stack">
            </div>
        </div>

        <div class="col-lg-6">
            Memory
            <div id="memory">
            </div>
        </div>

        <div class="col-lg-6">
            VRAM
            <div id="vram">
            </div>
        </div>
    </div>
</div>

@code {
    int updates = 0;
    CpuState cpuState = new();

    private async void LoadFile(InputFileChangeEventArgs e)
    {
        IBrowserFile file = e.File;
        Console.WriteLine(e.File.Size);

        Stream stream = file.OpenReadStream();
        using MemoryStream memoryStream = new();
        await stream.CopyToAsync(memoryStream);
        byte[] data = memoryStream.ToArray();

        RunTest(data);
    }

    private void OnCpuStateChanged(object? sender, CpuState newState)
    {
        updates = updates + 1;
        cpuState = newState;
        StateHasChanged();
    }

    private void RunTest(byte[] bootRomData)
    {
        Console.WriteLine($"Loading Boot ROM from {nameof(bootRomData)}");
        BootRom bootRom = new(bootRomData);

        Memory memory = new();
        Bus bus = new(memory, cartridge: null, bootRom);
        IDisplay display = new NoDisplay();
        Cpu cpu = new(bus, display);

        cpu.CpuStateChanged += OnCpuStateChanged;

        cpu.ExecuteFrame(MemoryRegion.BootRomEnd * ConsoleSpecs.InstructionSizeInBytes);
    }
}
